{
	"nodes":[
		{"id":"b8b36f6a382066ef","x":-1918,"y":-862,"width":544,"height":223,"type":"text","text":"struct **io_kiocb**\n- this data struct is associated with each io request. \n- it holds pointer to kernel data structure which are need to complete the IO request \n- this struct holds union of all the different request"},
		{"id":"e1f79341ae8794d0","x":-1196,"y":-995,"width":428,"height":400,"type":"text","text":"struct io_rw\n- the struct hold the addr where the data will be read\n- this struct is used for read & write system calls\n- it has ref to **struct kio_cb** which is kernel io callback struct from file sub-system\n- addr & len field are where the data will be read and the length of data to read."},
		{"id":"7ddd4001c8e7e4c8","x":-1564,"y":-290,"width":190,"height":60,"type":"text","text":"io_submit_sques"},
		{"id":"29a068d2dd2cae15","x":-376,"y":-744,"width":424,"height":273,"color":"2","type":"text","text":"**io_req_prep**\n- the function prepares data struct for io_uring supported feature calls\n- this function call other function to prepared data struct for io request"},
		{"id":"ff664462b63ad4cf","x":-1870,"y":-290,"width":181,"height":60,"type":"text","text":"io_uring_enter"},
		{"id":"4d7dee751b5b4ee9","x":-1138,"y":-365,"width":429,"height":211,"type":"text","text":"io_submit_sqe\n- prepares and initialized single io request via **io_init_req**\n- submits the requet to queue via **io_queue_sqe**"},
		{"id":"a82baf4e2a81891e","x":-293,"y":-79,"width":470,"height":148,"type":"text","text":"io_queue_sqe\n- calls via private function **__io_queue_sqe**"},
		{"id":"51f5043d5a31955c","x":-230,"y":328,"width":344,"height":158,"type":"text","text":"**io_wq_submit_work**\n- function gets called as worker thread function"},
		{"id":"ac5b6450f790aaa0","x":-1536,"y":-1441,"width":428,"height":267,"type":"text","text":"**io_uring_add_tctx_node**\n- structure is allocated for a new thread that sends an io_uring request. \n- There can be multiple io_ctx_nodes in a single process if multiple threads call into io_uring."},
		{"id":"e4a3286a8a1fa9af","x":-880,"y":-1342,"width":412,"height":50,"type":"text","text":"__io_uring_add_tctx_node_from_submit"},
		{"id":"6b426804bc1e3b52","x":205,"y":-762,"width":250,"height":60,"type":"text","text":"io_read_prep"},
		{"id":"891965ed41e152cc","x":205,"y":-598,"width":250,"height":60,"type":"text","text":"io_write_prep"},
		{"id":"8ed8eb085ffb7cf6","x":2803,"y":-1082,"width":469,"height":222,"type":"text","text":"io_put_kbuf\n- the request’s flags are checked for REQ_F_BUFFER_SELECTED. If it is set, on line 8 the function io_put_kbuf is called with req->rw.addr as the kbuf parameter."},
		{"id":"f438f5f8f82072b0","x":1323,"y":-1032,"width":272,"height":123,"type":"text","text":"io_complete_rw\n- work thread function"},
		{"id":"2ee5e414e18037f1","x":1595,"y":137,"width":148,"height":50,"type":"text","text":"io_read"},
		{"id":"5904883458efbef0","x":1813,"y":-1001,"width":250,"height":60,"type":"text","text":"io_req_task_complete"},
		{"id":"dfefcdd63eb1ee92","x":2063,"y":-165,"width":185,"height":61,"type":"text","text":"io_iter_do_read"},
		{"id":"f3dc53423a99f501","x":2284,"y":-1001,"width":250,"height":60,"type":"text","text":"io_put_rw_kbuf"},
		{"id":"9ad23379888b9f7f","x":1938,"y":53,"width":436,"height":303,"type":"text","text":"io_import_vec\n\n- then calls **io_rw_buffer_select**\n\t- If a request is submitted with **IOSQE_BUFFER_SELECT** , the function io_rw_buffer_select is called before the read or write is performed."},
		{"id":"03c4c9e0dd59b919","x":-376,"y":-1346,"width":341,"height":59,"type":"text","text":"__io_uring_add_tctx_node"},
		{"id":"5662c5ea8ab542f1","x":-3010,"y":-10,"width":846,"height":362,"type":"text","text":"[[io_uring]] sub system\n\n- io_uring is a relatively new API for asynchronous I/O (and related operations); User space sets up a pair of circular buffers shared with the kernel; the first buffer is used to submit operations to the kernel, while the second receives the results when operations complete. \n- A suitably busy process that keeps the submission ring full can perform an indefinite number of operations without needing to make any system calls, which clearly improves performance. \n- io_uring also implements the concept of \"fixed\" buffers and files; these are held open, mapped, and ready for I/O within the kernel, saving the setup and teardown overhead that is otherwise incurred by every operation. It all adds up to a significantly faster way for I/O-intensive applications to work."},
		{"id":"20b32d5dbbd53cf8","x":1607,"y":435,"width":125,"height":50,"type":"text","text":"io_write"},
		{"id":"69d094eb36a496a7","x":1595,"y":687,"width":657,"height":419,"type":"text","text":"**io_provide_buffers**\n\n- One such feature is ORING_OP_PROVIDE_BUFFERS, which allows the application to register a pool of buffers the kernel can use for operations.\n- Because of the asynchronous nature of io_uring, selecting a buffer for an operation can get complicated. Because the operation won’t be completed for an indefinite amount of time, the application needs to keep track of what buffers are currently in flight for a request. This feature saves the application the trouble of having to manage this, and treat buffer selection as automatic.\n- The buffers are grouped by a group ID, buf_group and a buffer id, bid. When submitting a request, the application indicates that a provided buffer should be used by setting a flag IOSQE_BUFFER_SELECT and specifies the group ID. When the operation is complete, the bid of the buffer used is passed back via the CQE.\n- excellent article about on this [link](https://web.archive.org/web/20221004095219/https://lwn.net/Articles/813311/)"},
		{"id":"846a6adac53d1631","x":2825,"y":435,"width":250,"height":60,"color":"4","type":"text","text":"loop_rw_iter"},
		{"id":"30eef6b7c5071c3f","x":795,"y":260,"width":444,"height":294,"color":"2","type":"text","text":"**io_issue_sqe**\n- command handle function which call all the io function which io_uring supports like **io_send**, **io_read**, etc\n- This is the function the read meat of this sub-system"},
		{"id":"80570b920752dad3","x":-1952,"y":958,"width":250,"height":60,"type":"text","text":"io_uring_register"},
		{"id":"28813f2b82589c70","x":-1910,"y":381,"width":177,"height":59,"type":"text","text":"io_uring_setup"},
		{"id":"de1f1f18dd09251b","x":-1030,"y":268,"width":431,"height":287,"type":"text","text":"**io_init_wq_offload**\n- setups the data struct for the worker thread \n- background thread create by **io_wq_create** function \n- this function submit"},
		{"id":"0d1900655bbcd25a","x":-1564,"y":381,"width":190,"height":59,"type":"text","text":"io_using_setup"},
		{"id":"6e13b66907953459","x":280,"y":-359,"width":250,"height":60,"type":"text","text":"io_req_complete"},
		{"id":"e1991c093ca24416","x":677,"y":-789,"width":362,"height":251,"type":"text","text":"io_prep_rw\n- generic function to prepare read / write request\n- sets up read write data struct flags for the r/w request"},
		{"id":"fa08cbbaf6eb72c8","x":303,"y":-203,"width":250,"height":60,"type":"text","text":"__io_queue_sqe"},
		{"id":"74d1337d367fd49c","x":795,"y":-263,"width":250,"height":60,"type":"text","text":"io_put_req"},
		{"id":"c9964b0bd8b88fb5","x":303,"y":39,"width":250,"height":60,"type":"text","text":"io_req_defer"}
	],
	"edges":[
		{"id":"4222d462ea31f02e","fromNode":"20b32d5dbbd53cf8","fromSide":"right","toNode":"846a6adac53d1631","toSide":"left"},
		{"id":"816d300c73809b21","fromNode":"dfefcdd63eb1ee92","fromSide":"right","toNode":"846a6adac53d1631","toSide":"left"},
		{"id":"5dcafae276936d63","fromNode":"2ee5e414e18037f1","fromSide":"right","toNode":"dfefcdd63eb1ee92","toSide":"left"},
		{"id":"34a19b087e3df046","fromNode":"5662c5ea8ab542f1","fromSide":"right","toNode":"ff664462b63ad4cf","toSide":"left"},
		{"id":"b13423cc7851b6eb","fromNode":"ff664462b63ad4cf","fromSide":"right","toNode":"7ddd4001c8e7e4c8","toSide":"left"},
		{"id":"ea5a5f2699440c3d","fromNode":"4d7dee751b5b4ee9","fromSide":"right","toNode":"29a068d2dd2cae15","toSide":"left"},
		{"id":"83c65977ae8cbeab","fromNode":"7ddd4001c8e7e4c8","fromSide":"right","toNode":"4d7dee751b5b4ee9","toSide":"left"},
		{"id":"e698b9efe7e9c218","fromNode":"29a068d2dd2cae15","fromSide":"right","toNode":"6b426804bc1e3b52","toSide":"left"},
		{"id":"d734a6e775b34d31","fromNode":"6b426804bc1e3b52","fromSide":"right","toNode":"e1991c093ca24416","toSide":"left"},
		{"id":"bc9df54978d39888","fromNode":"30eef6b7c5071c3f","fromSide":"right","toNode":"2ee5e414e18037f1","toSide":"left"},
		{"id":"8ccac9f0cf5bc90e","fromNode":"30eef6b7c5071c3f","fromSide":"right","toNode":"20b32d5dbbd53cf8","toSide":"left"},
		{"id":"0b876f8366dd0f59","fromNode":"5662c5ea8ab542f1","fromSide":"right","toNode":"28813f2b82589c70","toSide":"left"},
		{"id":"f7204cb2c4fabe4e","fromNode":"28813f2b82589c70","fromSide":"right","toNode":"0d1900655bbcd25a","toSide":"left"},
		{"id":"f95be61ae8981619","fromNode":"51f5043d5a31955c","fromSide":"right","toNode":"30eef6b7c5071c3f","toSide":"left"},
		{"id":"19413e9146daf22b","fromNode":"fa08cbbaf6eb72c8","fromSide":"right","toNode":"30eef6b7c5071c3f","toSide":"left"},
		{"id":"6bb028df4014d7f3","fromNode":"0d1900655bbcd25a","fromSide":"right","toNode":"de1f1f18dd09251b","toSide":"left"},
		{"id":"5d05bcc679bb667a","fromNode":"4d7dee751b5b4ee9","fromSide":"right","toNode":"a82baf4e2a81891e","toSide":"left"},
		{"id":"8bb81698fafde3d2","fromNode":"de1f1f18dd09251b","fromSide":"right","toNode":"51f5043d5a31955c","toSide":"left"},
		{"id":"7ef148e2423a71b4","fromNode":"5662c5ea8ab542f1","fromSide":"right","toNode":"80570b920752dad3","toSide":"left"},
		{"id":"00fdfb6fd7a25853","fromNode":"29a068d2dd2cae15","fromSide":"right","toNode":"891965ed41e152cc","toSide":"left"},
		{"id":"b343866813483845","fromNode":"891965ed41e152cc","fromSide":"right","toNode":"e1991c093ca24416","toSide":"left"},
		{"id":"1ebc7381561d1628","fromNode":"2ee5e414e18037f1","fromSide":"right","toNode":"9ad23379888b9f7f","toSide":"left"},
		{"id":"31bfe9de76c5b338","fromNode":"20b32d5dbbd53cf8","fromSide":"right","toNode":"9ad23379888b9f7f","toSide":"left"},
		{"id":"a7ec48bd1372b912","fromNode":"5904883458efbef0","fromSide":"right","toNode":"f3dc53423a99f501","toSide":"left"},
		{"id":"b4301d8338eb5dd3","fromNode":"f438f5f8f82072b0","fromSide":"right","toNode":"5904883458efbef0","toSide":"left"},
		{"id":"6a70ffbcae3dbe6c","fromNode":"e1991c093ca24416","fromSide":"right","toNode":"f438f5f8f82072b0","toSide":"left"},
		{"id":"ae1533df0507f93d","fromNode":"f3dc53423a99f501","fromSide":"right","toNode":"8ed8eb085ffb7cf6","toSide":"left"},
		{"id":"e9b9d93c14192b22","fromNode":"30eef6b7c5071c3f","fromSide":"right","toNode":"69d094eb36a496a7","toSide":"left"},
		{"id":"b248914a1229295c","fromNode":"5662c5ea8ab542f1","fromSide":"right","toNode":"b8b36f6a382066ef","toSide":"left"},
		{"id":"673a760779de25d7","fromNode":"b8b36f6a382066ef","fromSide":"right","toNode":"e1f79341ae8794d0","toSide":"left"},
		{"id":"09e45bb96173a630","fromNode":"a82baf4e2a81891e","fromSide":"right","toNode":"fa08cbbaf6eb72c8","toSide":"left"},
		{"id":"e8de4fc88fc553e5","fromNode":"fa08cbbaf6eb72c8","fromSide":"right","toNode":"74d1337d367fd49c","toSide":"left"},
		{"id":"89122e83946156a8","fromNode":"a82baf4e2a81891e","fromSide":"right","toNode":"6e13b66907953459","toSide":"left"},
		{"id":"43fd3c833dfc94f1","fromNode":"a82baf4e2a81891e","fromSide":"right","toNode":"c9964b0bd8b88fb5","toSide":"left"},
		{"id":"f73c79e5920896d7","fromNode":"e4a3286a8a1fa9af","fromSide":"right","toNode":"03c4c9e0dd59b919","toSide":"left"},
		{"id":"259fbd269a555237","fromNode":"ac5b6450f790aaa0","fromSide":"right","toNode":"e4a3286a8a1fa9af","toSide":"left"},
		{"id":"5cc47489b6821b4a","fromNode":"ff664462b63ad4cf","fromSide":"right","toNode":"ac5b6450f790aaa0","toSide":"left"}
	]
}